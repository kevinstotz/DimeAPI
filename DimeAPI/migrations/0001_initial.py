# Generated by Django 2.0.1 on 2018-03-14 19:23

import DimeAPI.managers
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('address1', models.CharField(default='', max_length=255, verbose_name='Address 1')),
                ('address2', models.CharField(default='', max_length=255, verbose_name='Address 2')),
                ('address3', models.CharField(default='', max_length=255, verbose_name='Address 3')),
                ('unit', models.CharField(max_length=20, verbose_name='Unit')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Affiliate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Affiliate')),
                ('firstName', models.CharField(max_length=50, verbose_name='First Name of Affiliate')),
                ('lastName', models.CharField(max_length=50, verbose_name='Last Name of Affiliate')),
                ('zipCode', models.CharField(default='00000', max_length=10, verbose_name='Zip Code of Affiliate')),
                ('phoneNumber', models.CharField(default='0000000000', max_length=20, verbose_name='Phone Number of Affiliate')),
                ('companyName', models.CharField(max_length=50, verbose_name='Company Name of Affiliate')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Date of Registration')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, verbose_name='City Name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ContactUsForm',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email')),
                ('subject', models.CharField(max_length=50, verbose_name='Subject of email')),
                ('name', models.CharField(max_length=100, verbose_name='name of person')),
                ('message', models.CharField(max_length=255, verbose_name='message')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Date of contact')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sort_name', models.CharField(default='XX', max_length=3, verbose_name='2 letter name')),
                ('name', models.CharField(default='XXX', max_length=30, verbose_name='City Name')),
                ('phone_code', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ('sort_name',),
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('symbol', models.CharField(default='', max_length=10)),
                ('coinName', models.CharField(default='', max_length=50)),
                ('fullName', models.CharField(default='', max_length=100)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DimeFund',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rebalance_date', models.DateField(default=datetime.date.today)),
                ('rank', models.IntegerField(default=1)),
                ('level', models.FloatField(default=0.0)),
                ('rebalance_price', models.FloatField(default=0.0)),
                ('market_cap', models.BigIntegerField(default=1)),
                ('available_supply', models.BigIntegerField(default=1)),
                ('percent_of_dime', models.FloatField(default=0.0)),
                ('amount', models.FloatField(default=0.0)),
                ('rebalance_value', models.FloatField(default=0.0)),
                ('end_price', models.FloatField(default=0.0)),
                ('end_value', models.FloatField(default=0.0)),
                ('currency', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.Currency')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DimeHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.BigIntegerField(default=1, verbose_name='Close Date')),
                ('value', models.FloatField(default=0.0)),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DimePeriod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('num_of_coins', models.IntegerField(default=10)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='No Name', max_length=255, verbose_name='Filename of document')),
                ('size', models.IntegerField(default=1)),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
                ('modified', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id', 'type', 'user', 'status'),
            },
        ),
        migrations.CreateModel(
            name='DocumentStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=20, verbose_name='Status of Document')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=20, verbose_name='Type of Document')),
            ],
            options={
                'ordering': ('type',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Register')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddressStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Email Address')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddressType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=20, verbose_name='Type of Email Address')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=60, verbose_name='Subject of Email')),
                ('fromAddress', models.CharField(max_length=50, verbose_name='From Username')),
                ('htmlFilename', models.FileField(blank=True, null=True, upload_to='DimeAPI\\EmailTemplates', verbose_name='Filename')),
                ('textFilename', models.FileField(blank=True, null=True, upload_to='DimeAPI\\EmailTemplates', verbose_name='Filename')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=20, verbose_name='Type of Document')),
            ],
            options={
                'ordering': ('type',),
            },
        ),
        migrations.CreateModel(
            name='MailServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(default='No Name', max_length=255, verbose_name='vendor name')),
                ('username', models.CharField(default='No Name', max_length=100, verbose_name='username')),
                ('password', models.CharField(default='No Name', max_length=64, verbose_name='password')),
                ('server', models.CharField(default='No Name', max_length=255, verbose_name='server name')),
            ],
            options={
                'ordering': ('vendor',),
            },
        ),
        migrations.CreateModel(
            name='Name',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name of User')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NameType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, verbose_name='Type of Name')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField(default=1, verbose_name='ID of Network')),
                ('name', models.CharField(default='0', max_length=50, verbose_name='Name of Network')),
                ('url', models.CharField(default='0', max_length=100, verbose_name='Url of Network')),
                ('queryUrl', models.CharField(default='0', max_length=100, verbose_name='query Url of Network')),
                ('api', models.CharField(default='0', max_length=42, verbose_name='APIKey of Network')),
                ('genesis', models.IntegerField(default=1, verbose_name='Beginning block Number')),
                ('lastBlockChecked', models.IntegerField(default=1, verbose_name='Url of Network')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NewsLetter',
            fields=[
                ('email', models.EmailField(default='noemail@thedime.fund', max_length=100, primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(default=1)),
            ],
            options={
                'ordering': ('email',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fromUser', models.IntegerField(default=1)),
                ('toUser', models.IntegerField(default=1)),
                ('message', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NotificationStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Notification')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, verbose_name='Type of Notification')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('authorization_code', models.CharField(max_length=20, verbose_name='Password Reset Code')),
                ('clicked', models.DateTimeField(auto_now=True, verbose_name='Time clicked')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PasswordResetStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Password Reset')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(max_length=16, verbose_name='Phone Number')),
                ('country', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.Country')),
            ],
            options={
                'ordering': ('id', 'phone_number', 'country'),
            },
        ),
        migrations.CreateModel(
            name='PhoneNumberType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(default='1', max_length=20, verbose_name='Type of Phone Number')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Register')),
                ('password', models.CharField(default='none', max_length=64, verbose_name='Password of Register')),
                ('firstName', models.CharField(max_length=50, verbose_name='First Name of Register')),
                ('lastName', models.CharField(max_length=50, verbose_name='Last Name of Register')),
                ('zipCode', models.CharField(default='00000', max_length=10, verbose_name='Zip Code of Register')),
                ('ipAddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address of Register')),
                ('authorizationCode', models.CharField(max_length=20, verbose_name='Auto Generated Auth Code')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Date of Registration')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='RegisterStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Register')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='XX', max_length=40, verbose_name='State Name')),
                ('code', models.CharField(default='XX', max_length=2, verbose_name='State Code')),
                ('country', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.Country')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UserAgent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userAgent', models.CharField(blank=True, default='Unknown', max_length=255, null=True, verbose_name='User Agent')),
                ('os', models.CharField(blank=True, default='Unknown', max_length=20, null=True, verbose_name='Operating System')),
                ('browser', models.CharField(blank=True, default='Unknown', max_length=20, null=True, verbose_name='Browser')),
                ('device', models.CharField(blank=True, default='Unknown', max_length=20, null=True, verbose_name='Device')),
                ('os_version', models.CharField(blank=True, default='Unknown', max_length=30, null=True, verbose_name='OS Version')),
                ('browser_version', models.CharField(blank=True, default='Unknown', max_length=30, null=True, verbose_name='OS Version')),
            ],
            options={
                'ordering': ('os',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('about', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=42, verbose_name='Status of User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('category', models.CharField(default='', max_length=50)),
                ('url', models.CharField(default='', max_length=200)),
                ('api_url', models.CharField(default='', max_length=200)),
                ('api_key', models.CharField(default='', max_length=100)),
                ('username', models.CharField(default='', max_length=50)),
                ('password', models.CharField(default='', max_length=50)),
            ],
            options={
                'ordering': ('id', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Xchange',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('url', models.CharField(default='', max_length=200)),
                ('category', models.CharField(default='', max_length=50)),
                ('order', models.SmallIntegerField(default=1)),
                ('api_url', models.CharField(default='', max_length=200)),
                ('api_key', models.CharField(default='', max_length=200)),
                ('api_secret', models.CharField(default='', max_length=200)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='XchangeCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.IntegerField(default=1)),
                ('currencyXChange', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.Xchange')),
            ],
            options={
                'ordering': ('currencyXChange', 'currency'),
            },
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('zipcode', models.CharField(default='00000', max_length=5)),
            ],
            options={
                'ordering': ('zipcode',),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Login of user')),
                ('username', models.CharField(default='Username', max_length=100, unique=True, verbose_name='username of user')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
                ('is_active', models.BooleanField(default=True)),
                ('is_logged_in', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.UserStatus')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('user_profile', models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='customUser', to='DimeAPI.UserProfile')),
            ],
            options={
                'ordering': ('id',),
            },
            managers=[
                ('objects', DimeAPI.managers.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='state',
            name='zip_codes',
            field=models.ManyToManyField(to='DimeAPI.ZipCode'),
        ),
        migrations.AddField(
            model_name='register',
            name='deviceInfo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.UserAgent'),
        ),
        migrations.AddField(
            model_name='register',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='DimeAPI.RegisterStatus'),
        ),
        migrations.AddField(
            model_name='phonenumber',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.PhoneNumberType'),
        ),
        migrations.AddField(
            model_name='phonenumber',
            name='user_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='phoneNumbers', to='DimeAPI.UserProfile', verbose_name='Phone Numbers'),
        ),
        migrations.AddField(
            model_name='passwordreset',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.PasswordResetStatus'),
        ),
        migrations.AddField(
            model_name='passwordreset',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.NotificationStatus'),
        ),
        migrations.AddField(
            model_name='notification',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.NotificationType'),
        ),
        migrations.AddField(
            model_name='name',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='DimeAPI.NameType', verbose_name='Name Type'),
        ),
        migrations.AddField(
            model_name='name',
            name='user_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='names', to='DimeAPI.UserProfile', verbose_name='Names'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='DimeAPI.EmailAddressStatus'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.EmailAddressType'),
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='user_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='emailAddresses', to='DimeAPI.UserProfile', verbose_name='User Profile'),
        ),
        migrations.AddField(
            model_name='document',
            name='file_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.FileType'),
        ),
        migrations.AddField(
            model_name='document',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.DocumentStatus'),
        ),
        migrations.AddField(
            model_name='document',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.DocumentType'),
        ),
        migrations.AddField(
            model_name='document',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.UserProfile'),
        ),
        migrations.AddField(
            model_name='dimehistory',
            name='xchange',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.Xchange'),
        ),
        migrations.AddField(
            model_name='dimefund',
            name='period',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='DimeAPI.DimePeriod'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='DimeAPI.State'),
        ),
        migrations.AddField(
            model_name='city',
            name='zip_codes',
            field=models.ManyToManyField(to='DimeAPI.ZipCode'),
        ),
        migrations.AddField(
            model_name='affiliate',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='DimeAPI.RegisterStatus'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='DimeAPI.City'),
        ),
        migrations.AddField(
            model_name='address',
            name='country',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='DimeAPI.Country'),
        ),
        migrations.AddField(
            model_name='address',
            name='state',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='DimeAPI.State'),
        ),
        migrations.AddField(
            model_name='address',
            name='user_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='addresses', to='DimeAPI.UserProfile', verbose_name='Addresses'),
        ),
        migrations.AddField(
            model_name='address',
            name='zipcode',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='DimeAPI.ZipCode'),
        ),
        migrations.AlterUniqueTogether(
            name='dimehistory',
            unique_together={('time', 'xchange')},
        ),
    ]
