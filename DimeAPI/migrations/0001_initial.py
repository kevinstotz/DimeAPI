# Generated by Django 2.0.1 on 2018-01-26 05:22

import DimeAPI.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Register')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EmailAddressStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Email Address')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Name',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Name of User')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='NameType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50, verbose_name='Type of Name')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField(default=1, verbose_name='ID of Network')),
                ('name', models.CharField(default='0', max_length=50, verbose_name='Name of Network')),
                ('url', models.CharField(default='0', max_length=100, verbose_name='Url of Network')),
                ('queryUrl', models.CharField(default='0', max_length=100, verbose_name='query Url of Network')),
                ('api', models.CharField(default='0', max_length=42, verbose_name='APIKey of Network')),
                ('genesis', models.IntegerField(default=0, verbose_name='Beginning block Number')),
                ('lastBlockChecked', models.IntegerField(default=0, verbose_name='Url of Network')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(default='noemail@noemail.com', max_length=100, verbose_name='Email of Register')),
                ('firstName', models.CharField(max_length=50, verbose_name='First Name of Register')),
                ('lastName', models.CharField(max_length=50, verbose_name='Last Name of Register')),
                ('ipAddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address of Register')),
                ('userAgent', models.CharField(blank=True, max_length=255, verbose_name='User Agent of Register')),
                ('authorizationCode', models.CharField(max_length=20, verbose_name='Auto Generated Auth Code')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='RegisterStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50, verbose_name='Status of Register')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=42, verbose_name='Status of User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Login email of user')),
                ('inserted', models.DateTimeField(auto_now_add=True, verbose_name='Time inserted')),
                ('is_active', models.BooleanField(default=True)),
                ('is_logged_in', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
            },
            managers=[
                ('objects', DimeAPI.managers.UserManager()),
            ],
        ),
    ]
